package sbencoding

import scala.reflect._

trait ProductFormatsInstances { self: ProductFormats with StandardFormats =>
[#  // Case classes with 1 parameters

  def bencodingFormat1[[#P1 :BF#], T <: Product :ClassTag](construct: ([#P1#]) => T): RootBencodingFormat[T] = {
    val Array([#p1#]) = extractFieldNames(classTag[T])
    bencodingFormat(construct, [#p1#])
  }
  def bencodingFormat[[#P1 :BF#], T <: Product](construct: ([#P1#]) => T, [#fieldName1: String#]): RootBencodingFormat[T] = new RootBencodingFormat[T]{
    def write(p: T) = {
      val fields = new collection.mutable.ListBuffer[(String, BcValue)]
      fields.sizeHint(1 * 2)
      [#fields ++= productElement##2Field[P1](fieldName1, p, 0)#
      ]
      BcDict(fields: _*)
    }
    def read(value: BcValue) = {
      [#val p1V = fromField[P1](value, fieldName1)#
      ]
      construct([#p1V#])
    }
  }#


]
}
